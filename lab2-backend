from fastapi import FastAPI, UploadFile, File
from fastapi.responses import FileResponse, JSONResponse
import paho.mqtt.client as mqtt
import os
from uuid import uuid4

app = FastAPI()

# Folder pentru imaginile salvate local
STORAGE_DIR = "storage"
os.makedirs(STORAGE_DIR, exist_ok=True)

# MQTT Config
MQTT_BROKER = "localhost"
MQTT_PORT = 1883
MQTT_TOPIC = "camera/image"

def on_message(client, userdata, msg):
    """ Callback pentru mesajele MQTT primite """
    image_name = f"{uuid4()}.jpg"
    image_path = os.path.join(STORAGE_DIR, image_name)
    
    with open(image_path, "wb") as f:
        f.write(msg.payload)
    
    print(f"Saved {image_name} to local storage")

mqtt_client = mqtt.Client()
mqtt_client.on_message = on_message
mqtt_client.connect(MQTT_BROKER, MQTT_PORT)
mqtt_client.subscribe(MQTT_TOPIC)
mqtt_client.loop_start()

@app.post("/upload/")
async def upload_image(file: UploadFile = File(...)):
    """ Endpoint pentru upload manual de imagini """
    image_name = f"{uuid4()}.jpg"
    image_path = os.path.join(STORAGE_DIR, image_name)
    
    with open(image_path, "wb") as f:
        f.write(await file.read())

    return JSONResponse(content={"message": "Image uploaded", "filename": image_name})

@app.get("/images/")
def list_images():
    """ Endpoint pentru listarea imaginilor salvate """
    images = os.listdir(STORAGE_DIR)
    return {"images": images}

@app.get("/images/{image_name}")
def get_image(image_name: str):
    """ Endpoint pentru descÄƒrcarea unei imagini """
    image_path = os.path.join(STORAGE_DIR, image_name)
    if os.path.exists(image_path):
        return FileResponse(image_path)
    return JSONResponse(content={"error": "File not found"}, status_code=404)
